{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/CreateDeck.js","Layout/StudyCard.js","Layout/Study.js","Layout/ViewDeck.js","Layout/EditDeck.js","Layout/CreateEditCard.js","Layout/DeckDisplay.js","Layout/RandomPage.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","logResponse","name","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updateCard","updatedCard","append","CreateDeck","history","useHistory","useState","title","setTitle","description","setDescription","goHome","push","aria-label","href","aria-current","type","placeholder","onChange","event","target","value","rows","to","onClick","StudyCard","deckCards","nextButton","setNextButton","cardIndex","setCardIndex","clickHandler","lessThanThree","length","nextButtonHandler","window","confirm","deckCardsMapped","map","index","style","width","back","front","Study","studyDisplay","setStudyDisplay","setDeckCards","useParams","useEffect","display","callDeck","ViewDeck","setDeck","setCards","deleteHandler","deleteCard","location","reload","deckDisplay","loadDeck","cardDisplay","variant","EditDeck","goToDeck","then","defaultValue","newTitle","newDescription","CreateEditCard","useLocation","setCard","cardFront","setCardFront","cardBack","setCardBack","newCard","readCard","editCardForm","htmlFor","newFront","newBack","createCardForm","role","pathname","includes","DeckDisplay","decks","setDecks","RandomPage","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.339d7f43.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  // console.log(\"fetchJson\", url, options, onCancel);\n  try {\n    const response = await fetch(url, options);\n    // console.log(\"fetchJson Status\", response.status);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n    const logResponse = await response.json();\n    // console.log(\"fetchJson logResponse\", logResponse, response.status);\n    return logResponse;\n  } catch (error) {\n    // console.log(\"fetchJson error\", error);\n    if (error.name !== \"AbortError\") {\n      // console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  // console.log(\"listDecks\");\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"./../utils/api/index\";\r\n\r\nconst CreateDeck = () => {\r\n  let history = useHistory();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const titleChange = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n  const descriptionChange = (event) => {\r\n    setDescription(event.target.value);\r\n  };\r\n  function goHome() {\r\n    history.push(\"/\");\r\n  }\r\n  async function createDeckHandler() {\r\n    await createDeck({ name: title, description: description });\r\n    goHome();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Create Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>Create Deck</h3>\r\n      <br />\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Deck Name</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlInput1\"\r\n          placeholder=\"Name of Deck\"\r\n          onChange={titleChange}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">Description of Deck</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"3\"\r\n          placeholder=\"Brief Description of the deck\"\r\n          onChange={descriptionChange}\r\n        ></textarea>\r\n      </div>\r\n      <Link to=\"/\">\r\n        <button type=\"button\" className=\"btn btn-secondary\">\r\n          Cancel\r\n        </button>{\" \"}\r\n      </Link>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        onClick={createDeckHandler}\r\n      >\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateDeck;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst StudyCard = ({ deckCards, deckId }) => {\r\n  // console.log(\"StudyCard\", deckCards);\r\n  const [nextButton, setNextButton] = useState(false);\r\n  const [cardIndex, setCardIndex] = useState(0);\r\n  let history = useHistory();\r\n\r\n  const clickHandler = () => {\r\n    setNextButton(!nextButton);\r\n  };\r\n\r\n  const lessThanThree = (\r\n    <div>\r\n      <h2>Not enough cards</h2>\r\n      <p>\r\n        {\" \"}\r\n        You need at least 3 cards to study. There are only{\" \"}\r\n        <code>{deckCards.length}</code> cards in this deck.\r\n      </p>\r\n      <Link to={`/decks/${deckId}/cards/new`}>\r\n        <button className=\" btn btn-success\">+ Add Cards</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  function windowAlert() {\r\n    const restartAlert = window.confirm(\r\n      \"Restart cards? Click cancel to return to the home page\"\r\n    );\r\n    if (restartAlert) {\r\n      setCardIndex(0);\r\n    } else {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  function nextButtonHandler() {\r\n    setNextButton(!nextButton);\r\n    setCardIndex(cardIndex + 1);\r\n    if (cardIndex + 1 === deckCards.length) {\r\n      windowAlert();\r\n    }\r\n  }\r\n\r\n  const deckCardsMapped = deckCards.map((card, index) => (\r\n    <div>\r\n      <div className=\"card\" key={index} style={{ width: \"32rem\" }}>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            Card {index + 1} of {deckCards.length}\r\n          </h5>\r\n          <p className=\"card-text\">{nextButton ? card.back : card.front}</p>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={clickHandler}\r\n          >\r\n            Flip\r\n          </button>\r\n          {nextButton && (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={nextButtonHandler}\r\n            >\r\n              Next\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      {deckCards.length < 3 ? lessThanThree : deckCardsMapped[cardIndex]}\r\n    </div>\r\n  );\r\n};\r\nexport default StudyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { readDeck } from \"./../utils/api\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nconst Study = () => {\r\n  const [studyDisplay, setStudyDisplay] = useState({});\r\n  const [deckCards, setDeckCards] = useState([]);\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function callDeck() {\r\n      const display = await readDeck(deckId);\r\n      setStudyDisplay(display);\r\n      setDeckCards(display.cards);\r\n    }\r\n    callDeck();\r\n  }, [deckId]);\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <a href={`/decks/${deckId}/`}>{studyDisplay.name}</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <br />\r\n      <h2>Study: {studyDisplay.name}</h2>\r\n      <br />\r\n      <StudyCard\r\n        deckCards={deckCards}\r\n        studyDisplay={studyDisplay}\r\n        deckId={deckId}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Study;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck, deleteCard, deleteDeck } from \"./../utils/api/index\";\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\n\r\nconst ViewDeck = () => {\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState([]);\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const deckDisplay = await readDeck(deckId);\r\n      setDeck(deckDisplay);\r\n      setCards(deckDisplay.cards);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  function deleteHandler(cardId) {\r\n    const deleteAlert = window.confirm(\r\n      \"You will not be able to recover the card!\"\r\n    );\r\n    if (deleteAlert) {\r\n      deleteCard(cardId);\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  function deckDeleteHandler(id) {\r\n    const deleteAlert = window.confirm(\r\n      \"You will not be able to recover the deck!\"\r\n    );\r\n    if (deleteAlert) {\r\n      deleteDeck(id);\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  const cardDisplay = cards.map((card, index) => (\r\n    <div className=\"card\" key={index}>\r\n      <div className=\"card-body\">\r\n        <div>\r\n          <span>\r\n            <b>Front:</b> {card.front} <br />\r\n          </span>\r\n          <span>\r\n            <b>Back:</b> {card.back} <br /> <br />\r\n          </span>\r\n        </div>\r\n        <Link to={`/decks/${deckId}/cards/${card.id}/edit`}>\r\n          <button className=\"btn btn-secondary\">Edit</button>{\" \"}\r\n        </Link>\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          onClick={() => deleteHandler(card.id)}\r\n        >\r\n          Delete\r\n        </button>{\" \"}\r\n      </div>\r\n    </div>\r\n  ));\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            <b>{deck.name}</b>: Deck View\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <br />\r\n      <h3>{deck.name}</h3>\r\n      <p>{deck.description}</p>\r\n      <Link to={`/decks/${deckId}/edit`}>\r\n        <button className=\"btn btn-secondary\">Edit</button>{\" \"}\r\n      </Link>\r\n      <Link to={`/decks/${deckId}/study`}>\r\n        <button className=\"btn btn-primary\">Study</button>{\" \"}\r\n      </Link>\r\n      <Link to={`/decks/${deckId}/cards/new`}>\r\n        <button className=\"btn btn-primary\">+ Add Cards</button>{\" \"}\r\n      </Link>\r\n      <button\r\n        variant=\"danger \"\r\n        className=\"btn btn-danger float-right\"\r\n        onClick={() => deckDeleteHandler(deck.id)}\r\n      >\r\n        Delete\r\n      </button>\r\n      <hr />\r\n      <h2>Cards:</h2>\r\n      <div>{cardDisplay}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"./../utils/api/index\";\r\n\r\nconst EditDeck = () => {\r\n  let history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    readDeck(deckId).then(setDeck);\r\n  }, [deckId]);\r\n\r\n  useEffect(() => {\r\n    setTitle(title);\r\n    setDescription(description);\r\n  }, [description, title]);\r\n\r\n  function goToDeck() {\r\n    history.push(`/decks/${deckId}`);\r\n  }\r\n  async function updateDeckHandler() {\r\n    await updateDeck({ name: title, description: description, id: deck.id });\r\n    goToDeck();\r\n  }\r\n\r\n  function titleChangeHandler(event) {\r\n    const newTitle = event.target.value;\r\n    setTitle(newTitle);\r\n  }\r\n  function descriptionChangeHandler(event) {\r\n    const newDescription = event.target.value;\r\n    setDescription(newDescription);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <a href={`/decks/${deckId}`}>{deck.name}</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Edit Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>Edit Deck</h3>\r\n      <br />\r\n      <br />\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label></label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlInput1\"\r\n            defaultValue={deck.name}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label></label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            defaultValue={deck.description}\r\n            onChange={descriptionChangeHandler}\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n      <Link to=\"/\">\r\n        <button className=\"btn btn-secondary\">Cancel</button>{\" \"}\r\n      </Link>\r\n      <button className=\"btn btn-primary\" onClick={updateDeckHandler}>\r\n        Submit\r\n      </button>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory, useLocation, Link } from \"react-router-dom\";\r\nimport { readDeck, readCard } from \"../utils/api/index\";\r\nimport { updateCard } from \"../utils/api/index\";\r\nimport { createCard } from \"../utils/api/index\";\r\n\r\nconst CreateEditCard = () => {\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n  const { deckId, cardId } = useParams();\r\n  const [deck, setDeck] = useState([]);\r\n  const [card, setCard] = useState([]);\r\n  const [cardFront, setCardFront] = useState(\"\");\r\n  const [cardBack, setCardBack] = useState(\"\");\r\n  const newCard = { front: cardFront, back: cardBack };\r\n\r\n  useEffect(() => {\r\n    readDeck(deckId).then(setDeck);\r\n  }, [deckId]);\r\n\r\n  useEffect(() => {\r\n    if (cardId) {\r\n      readCard(cardId).then(setCard);\r\n    }\r\n  }, [cardId]);\r\n\r\n  function goToDeck() {\r\n    history.push(`/decks/${deckId}`);\r\n  }\r\n\r\n  function frontChangeHandler(event) {\r\n    const newFront = event.target.value;\r\n    setCardFront(newFront);\r\n  }\r\n  function backChangeHandler(event) {\r\n    const newBack = event.target.value;\r\n    setCardBack(newBack);\r\n  }\r\n\r\n  const frontSideChangeHandler = (event) => {\r\n    setCardFront(event.target.value);\r\n  };\r\n  const backSideChangeHandler = (event) => {\r\n    setCardBack(event.target.value);\r\n  };\r\n\r\n  async function saveHandler() {\r\n    const newCard = {\r\n      id: card.id,\r\n      front: cardFront,\r\n      back: cardBack,\r\n      deckId: deckId,\r\n    };\r\n\r\n    await updateCard(newCard);\r\n    goToDeck();\r\n  }\r\n\r\n  async function saveCardHandler() {\r\n    await createCard(deckId, newCard);\r\n    goToDeck();\r\n  }\r\n\r\n  const editCardForm = (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <a href={`/decks/${deckId}/`}>{deck.name}</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Edit Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <br />\r\n      <h2>{deck.name}: Edit Card Form</h2>\r\n      <br />\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\">Front:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            defaultValue={card.front}\r\n            onChange={frontChangeHandler}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\">Back:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            defaultValue={card.back}\r\n            onChange={backChangeHandler}\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n      <Link to={`/decks/${deckId}`}>\r\n        <button className=\"btn btn-primary\">Done</button>{\" \"}\r\n      </Link>\r\n      <button className=\"btn btn-success\" onClick={saveHandler}>\r\n        Save Card\r\n      </button>{\" \"}\r\n    </div>\r\n  );\r\n\r\n  const createCardForm = (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <a href={`/decks/${deckId}/`}>{deck.name}</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <br />\r\n      <h2>{deck.name}: Create Card Form</h2>\r\n      <br />\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\">Front:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            type=\"text\"\r\n            placeholder=\"Front Side of Card\"\r\n            onChange={frontSideChangeHandler}\r\n          ></textarea>\r\n          <br />\r\n          <label htmlFor=\"exampleFormControlTextarea1\">Back:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"3\"\r\n            type=\"text\"\r\n            placeholder=\"Back Side of Card\"\r\n            onChange={backSideChangeHandler}\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n      <a className=\"btn btn-primary\" href={`/decks/${deckId}`} role=\"button\">\r\n        Done\r\n      </a>{\" \"}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-success\"\r\n        onClick={saveCardHandler}\r\n      >\r\n        Save Card\r\n      </button>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {location.pathname.includes(`decks/${deckId}/cards/${cardId}/edit`)\r\n        ? editCardForm\r\n        : createCardForm}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateEditCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { listDecks } from \"./../utils/api/index\";\r\nimport { deleteDeck } from \"./../utils/api/index\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst DeckDisplay = () => {\r\n  const [decks, setDecks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function callDeck() {\r\n      await listDecks().then(setDecks);\r\n    }\r\n    callDeck();\r\n  }, [setDecks]);\r\n\r\n  function deleteHandler(id) {\r\n    const deleteAlert = window.confirm(\r\n      \"You will not be able to recover the deck!\"\r\n    );\r\n    if (deleteAlert) {\r\n      deleteDeck(id);\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/decks/new\">\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          + Create Deck\r\n        </button>\r\n      </Link>\r\n      {decks.map((deck, index) => (\r\n        <div className=\"card\" key={index} style={{ width: \"50rem\" }}>\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">\r\n              {deck.name}{\" \"}\r\n              <div className=\"float-right\">{deck.cards.length} cards</div>\r\n            </h5>\r\n            <p className=\"card-text\">{deck.description}</p>\r\n            <Link to={`decks/${deck.id}`}>\r\n              <button type=\"button\" className=\"btn btn-secondary\">\r\n                View\r\n              </button>{\" \"}\r\n            </Link>\r\n            <Link to={`decks/${deck.id}/study`}>\r\n              <button type=\"button\" className=\"btn btn-primary\">\r\n                Study\r\n              </button>{\" \"}\r\n            </Link>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => deleteHandler(deck.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckDisplay;\r\n","import React from \"react\";\r\n\r\nconst RandomPage = () => {\r\n  return (\r\n    <div>\r\n      <text>\r\n        This is a random page! If you want to go back to the home page, click\r\n        that buttom below!\r\n        <br />\r\n        <br />\r\n        <button type=\"button\" className=\"btn btn-primary\">\r\n          HOME\r\n        </button>\r\n      </text>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomPage;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\nimport CreateDeck from \"./CreateDeck\";\nimport Study from \"./Study\";\nimport ViewDeck from \"./ViewDeck\";\nimport EditDeck from \"./EditDeck\";\nimport CreateEditCard from \"./CreateEditCard\";\nimport DeckDisplay from \"./DeckDisplay\";\nimport RandomPage from \"./RandomPage\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckDisplay />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <CreateEditCard />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <CreateEditCard />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <ViewDeck />\n          </Route>\n          <Route path=\"/random\">\n            <RandomPage />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}